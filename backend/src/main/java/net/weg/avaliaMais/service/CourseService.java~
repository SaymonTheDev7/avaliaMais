package net.weg.avaliaMais.service;

import lombok.RequiredArgsConstructor;
import net.weg.avaliaMais.model.Course;
import net.weg.avaliaMais.model.dto.request.CoursePostRequestDTO;
import net.weg.avaliaMais.model.dto.response.CourseResponseDTO;
import net.weg.avaliaMais.repository.CourseRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class CourseService {

    private final CourseRepository courseRepository;

    // Adiciona um novo curso
    public CourseResponseDTO addCourse(CoursePostRequestDTO coursePostRequestDTO) {
        if (courseRepository.findByNameCourse(coursePostRequestDTO.nameCourse()) != null) {
            throw new IllegalArgumentException("Já existe um curso com o nome fornecido");
        }

        Course courseSave = courseRepository.save(coursePostRequestDTO.converter());
        return courseSave.toDto();
    }

    // Atualiza um curso pelo nome
    public CourseResponseDTO updateCoursePerName(String nameCourse, CoursePostRequestDTO coursePostRequestDTO) {
        Course course = courseRepository.findByNameCourse(nameCourse);
        if (course == null) {
            throw new RuntimeException("Curso não encontrado");
        }
        course.setNameCourse(coursePostRequestDTO.nameCourse());
        course.setStartAndEndLocation(coursePostRequestDTO.startAndEndLocation());
        course.setTypeCourse(coursePostRequestDTO.typeCourse());
        course.setShift(coursePostRequestDTO.shift());
        course.setWorkloadCourse(coursePostRequestDTO.workloadCourse());
        course.setTime(coursePostRequestDTO.time());
        courseRepository.save(course);
        return course.toDto();
    }

    // Deleta um curso pelo nome
    public String deleteCoursePerName(String nameCourse) {
        List<Course> courses = courseRepository.findAllByNameCourse(nameCourse);

        if (courses.isEmpty()) {
            return "Curso não encontrado";
        }

        Course courseToDelete = courses.get(0);
        courseRepository.delete(courseToDelete);

        return "Curso deletado com sucesso";
    }

    // Busca um curso por UUID
    public CourseResponseDTO findCoursePerUuid(UUID uuid) {
        Course course = courseRepository.findByUuid(uuid);
        return course == null ? null : course.toDto();
    }

    // Busca um curso por nome
    public CourseResponseDTO findCoursePerName(String nameCourse) {
        try {
            // Verificando se o nome do curso é válido
            if (nameCourse == null || nameCourse.trim().isEmpty()) {
                throw new IllegalArgumentException("O nome do curso não pode ser vazio");
            }

            Course course = courseRepository.findByNameCourse(nameCourse);
            if (course == null) {
                return null;  // Nenhum curso encontrado
            }

            return course.toDto();
        } catch (IllegalArgumentException e) {
            System.err.println("Argumento inválido: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            // Logando erro completo para ajudar a identificar o problema
            System.err.println("Erro ao buscar curso por nome: " + nameCourse);
            e.printStackTrace();
            throw new RuntimeException("Erro inesperado ao buscar curso.");
        }
    }

    // Busca todos os cursos com paginação
    public Page<CourseResponseDTO> findAllCourses(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Course> coursePage = courseRepository.findAll(pageable);
        return coursePage.map(CourseResponseDTO::new);
    }
}
